#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Exploratory Data Analysis - Notes
\end_layout

\begin_layout Author
Tanner Prestegard
\end_layout

\begin_layout Date
Course taken from 5/4/2015 - 5/31/2015
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Subsection*

\series bold
Principles of analytic graphics
\end_layout

\begin_layout Itemize
Principle 1: show comparisons.
\end_layout

\begin_deeper
\begin_layout Itemize
Evidence for a hypothesis is always relative to a competing hypothesis.
\end_layout

\begin_layout Itemize
Always ask 
\begin_inset Quotes eld
\end_inset

compared to what?
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Principle 2: show causality, mechanism, explanation, systematic structure.
\end_layout

\begin_deeper
\begin_layout Itemize
What is your causal framework for thinking about a question?
\end_layout

\begin_layout Itemize
Explain how you think the system is operating.
\end_layout

\begin_layout Itemize
Can also show evidence to support your explanation of the results.
\end_layout

\end_deeper
\begin_layout Itemize
Principle 3: show multivariate data (more than two variables).
\end_layout

\begin_deeper
\begin_layout Itemize
The real world is multivariate.
\end_layout

\begin_layout Itemize
Need to 
\begin_inset Quotes eld
\end_inset

escape flatland
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Principle 4: integration of evidence.
\end_layout

\begin_deeper
\begin_layout Itemize
Completely integrate words, number, images, diagrams.
\end_layout

\begin_layout Itemize
Data graphics should make use of many modes of data presentation.
\end_layout

\begin_layout Itemize
Don't let the tool drive the analysis.
\end_layout

\end_deeper
\begin_layout Itemize
Principle 5: describe and document the evidence with appropriate labels,
 scales, sources, etc.
\end_layout

\begin_deeper
\begin_layout Itemize
A data graphic should tell a complete and credible story.
\end_layout

\end_deeper
\begin_layout Itemize
Principle 6: content is king.
\end_layout

\begin_deeper
\begin_layout Itemize
Analytical presentations ultimately stand or fall depending on the quality,
 relevance, and integrity of their content.
\end_layout

\begin_layout Itemize
Think about the story you are trying to tell with your graphic.
\end_layout

\end_deeper
\begin_layout Subsection*
Exploratory graphs
\end_layout

\begin_layout Itemize
Why do we use graphs in data analysis?
\end_layout

\begin_deeper
\begin_layout Itemize
To understand data properties.
\end_layout

\begin_layout Itemize
To find patterns in data.
\end_layout

\begin_layout Itemize
To suggest modeling strategies.
\end_layout

\begin_layout Itemize
To 
\begin_inset Quotes eld
\end_inset

debug
\begin_inset Quotes erd
\end_inset

 analyses.
\end_layout

\begin_layout Itemize
To communicate results.
\end_layout

\end_deeper
\begin_layout Itemize
Exploratory graphics are mainly about the first four things - not as important
 for communicating results.
\end_layout

\begin_deeper
\begin_layout Itemize
Tend to be made quickly (on the fly as you're looking through the data).
\end_layout

\begin_layout Itemize
A large number are made.
\end_layout

\begin_layout Itemize
The goal is for personal understanding.
\end_layout

\begin_layout Itemize
Axes/legends are generally cleaned up later.
\end_layout

\begin_layout Itemize
Color/size are primarily used for information.
\end_layout

\end_deeper
\begin_layout Itemize
Simple summaries of data
\end_layout

\begin_deeper
\begin_layout Itemize
One dimension:
\end_layout

\begin_deeper
\begin_layout Itemize
Five-number summary (
\family typewriter
summary()
\family default
)
\end_layout

\begin_layout Itemize
Box plots (
\family typewriter
boxplot()
\family default
)
\end_layout

\begin_layout Itemize
Histograms (
\family typewriter
hist(data, col= 
\begin_inset Quotes eld
\end_inset

green
\begin_inset Quotes erd
\end_inset

, breaks = 100)
\family default
)
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
breaks
\family default
 specifies the number of bins to use.
\end_layout

\begin_layout Itemize
Can plot 
\begin_inset Quotes eld
\end_inset

rug
\begin_inset Quotes erd
\end_inset

 underneath histogram bars to show where the data are located.
\end_layout

\end_deeper
\begin_layout Itemize
Density plots
\end_layout

\begin_layout Itemize
Bar plots (
\family typewriter
barplot()
\family default
)
\end_layout

\end_deeper
\begin_layout Itemize
Two dimensions:
\end_layout

\begin_deeper
\begin_layout Itemize
Multiple/overlaid 1D plots (
\family typewriter
Lattice
\family default
, 
\family typewriter
ggplot2
\family default
)
\end_layout

\begin_deeper
\begin_layout Itemize
Example: multiple boxplots.
 
\family typewriter
boxplot(pm25 ~ region, data = pollution, col = 
\begin_inset Quotes eld
\end_inset

red
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
Example: multiple histograms.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
hist(subset(pollution, region == 
\begin_inset Quotes eld
\end_inset

east
\begin_inset Quotes erd
\end_inset

)$pm25, col= 
\begin_inset Quotes eld
\end_inset

green
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize

\family typewriter
hist(subset(pollution, region == 
\begin_inset Quotes eld
\end_inset

west
\begin_inset Quotes erd
\end_inset

)$pm25, col= 
\begin_inset Quotes eld
\end_inset

green
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Scatter plots
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
with(pollution, plot(latitude, pm25))
\end_layout

\end_deeper
\begin_layout Itemize
Smooth scatter plots
\end_layout

\end_deeper
\begin_layout Itemize
More than two dimensions:
\end_layout

\begin_deeper
\begin_layout Itemize
Multiple/overlaid 2D plots; co-plots
\end_layout

\begin_layout Itemize
Use color, size, and shape to add dimensions.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
with(pollution, plot(latitude, pm25, col=region))
\end_layout

\end_deeper
\begin_layout Itemize
Spinning plots.
\end_layout

\begin_layout Itemize
Actual 3D plots (not very useful).
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Overlaying features
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
abline(v=12)
\family default
 draws a vertical line at x=12.
 Can use 
\family typewriter
h=5
\family default
 for example, to draw a horizontal line.
\end_layout

\end_deeper
\begin_layout Itemize
Further resources
\end_layout

\begin_deeper
\begin_layout Itemize
R Graph Gallery - lots of examples
\end_layout

\begin_layout Itemize
R Bloggers
\end_layout

\end_deeper
\begin_layout Subsection*
Plotting systems in R
\end_layout

\begin_layout Itemize
The base plotting system - old system that came with the base system of
 R
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Artist's palette
\begin_inset Quotes erd
\end_inset

 model.
\end_layout

\begin_layout Itemize
Start with a blank canvas and build up from there.
\end_layout

\begin_layout Itemize
Starts with the 
\family typewriter
plot()
\family default
 function or something similar.
\end_layout

\begin_layout Itemize
Use annotation functions to add/modify (
\family typewriter
text, lines, points, axis
\family default
)
\end_layout

\begin_layout Itemize
Convenient, mirrors how we think of building plots and analyzing data.
\end_layout

\begin_layout Itemize
Can't go back once plot has started, need to plan in advance.
\end_layout

\begin_layout Itemize
Difficult to 
\begin_inset Quotes eld
\end_inset

translate
\begin_inset Quotes erd
\end_inset

 to others once a new plot has been created (no graphical 
\begin_inset Quotes eld
\end_inset

language
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
Plot is just a series of R commands.
\end_layout

\end_deeper
\begin_layout Itemize
The lattice system (
\family typewriter
lattice
\family default
 package)
\end_layout

\begin_deeper
\begin_layout Itemize
Pros:
\end_layout

\begin_deeper
\begin_layout Itemize
Plots are created with a single function call (
\family typewriter
xyplot, bwplot,
\family default
 etc.).
\end_layout

\begin_layout Itemize
Most useful for conditioning types of plots - looking at how y changes with
 x across levels of z.
\end_layout

\begin_layout Itemize
Things like marings/spacing are set automatically because the entire plot
 is specified at once.
\end_layout

\begin_layout Itemize
Good for putting many plots on a screen.
\end_layout

\end_deeper
\begin_layout Itemize
Cons:
\end_layout

\begin_deeper
\begin_layout Itemize
Sometimes awkward to specify an entire plot in a single function call.
\end_layout

\begin_layout Itemize
Annotation in plot is not especially intuitive.
\end_layout

\begin_layout Itemize
Use of panel functions and subscripts difficult to wield and requires intense
 preparation.
\end_layout

\begin_layout Itemize
Cannot 
\begin_inset Quotes eld
\end_inset

add
\begin_inset Quotes erd
\end_inset

 to the plot once it is created.
\end_layout

\end_deeper
\begin_layout Itemize
Example: plot life expectancy vs.
 income by region.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
The ggplot2 system (
\family typewriter
ggplot2
\family default
 package)
\end_layout

\begin_deeper
\begin_layout Itemize
Splits the difference between base and lattice in a number of ways.
\end_layout

\begin_layout Itemize
Automatically deals with spacing, text, titles, but also allows you to annotate
 by adding to a plot.
\end_layout

\begin_layout Itemize
Superficial similarity to lattice but generally easier/more intuitive to
 use.
\end_layout

\begin_layout Itemize
Default mode makes many choices for you but you can still customize it.
\end_layout

\end_deeper
\begin_layout Subsection*
The base plotting system
\end_layout

\begin_layout Itemize
Core plotting packages: 
\family typewriter
graphics, grDevices
\family default
.
\end_layout

\begin_layout Itemize
The process of making a plot:
\end_layout

\begin_deeper
\begin_layout Itemize
Where will the plot be made?
\end_layout

\begin_layout Itemize
How will the plot be used?
\end_layout

\begin_layout Itemize
Is there a large amount of data going into the plot?
\end_layout

\begin_layout Itemize
Do you need to be able to dynamically resize the plot?
\end_layout

\begin_layout Itemize
What graphics system will you use? (the plotting systems generally can't
 be mixed)
\end_layout

\end_deeper
\begin_layout Itemize
Two phases to creating a base plot:
\end_layout

\begin_deeper
\begin_layout Itemize
Initializing a new plot.
\end_layout

\begin_deeper
\begin_layout Itemize
Calling 
\family typewriter
plot(x,y)
\family default
 or 
\family typewriter
hist(x)
\family default
 will launch a graphics device if one is not already open and draw a new
 plot on the device.
\end_layout

\end_deeper
\begin_layout Itemize
Annotating or adding to an existing plot.
\end_layout

\end_deeper
\begin_layout Itemize
The base graphics system has many parameters that can be set and tweaked
 - these are documented in 
\family typewriter
?par
\family default
.
\end_layout

\begin_layout Itemize
Some important base graphics parameters:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
pch
\family default
: marker symbol (default is open circle).
 Can take a number, which refers to a table of symbols, or a character,
 which will be used as the symbol.
\end_layout

\begin_layout Itemize

\family typewriter
cex
\family default
: marker size.
\end_layout

\begin_layout Itemize

\family typewriter
lty
\family default
: line type (default is solid line).
\end_layout

\begin_layout Itemize

\family typewriter
lwd
\family default
: line width, specified as an integer multiple.
\end_layout

\begin_layout Itemize

\family typewriter
col
\family default
: plotting color, specified as a number, string, or hex code.
 The 
\family typewriter
colors()
\family default
 function gives you a vector of colors by name.
\end_layout

\begin_layout Itemize

\family typewriter
xlab
\family default
: character string for the x-axis label.
\end_layout

\begin_layout Itemize

\family typewriter
ylab
\family default
: character string for the y-axis label.
\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
par()
\family default
 function is used to specify global graphics parameters that affect all
 plots in an R session.
 These parameters can be overidden when specified as arguments to specific
 plotting functions.
 Some examples:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
las
\family default
: orientation of the axis labels on the plot.
\end_layout

\begin_layout Itemize

\family typewriter
bg
\family default
: background color.
\end_layout

\begin_layout Itemize

\family typewriter
mar
\family default
: margin size.
\end_layout

\begin_layout Itemize

\family typewriter
oma
\family default
: outer margin size (default is 0 for all sides).
\end_layout

\begin_layout Itemize

\family typewriter
mfrow
\family default
: number of plots per row, column (plots are filled row-wise).
\end_layout

\begin_layout Itemize

\family typewriter
mfcol
\family default
: number of plots per row, column (plots are filled column-wise).
\end_layout

\begin_layout Itemize
Can get default values for these parameters by calling 
\family typewriter
par()
\family default
 with the parameter string.
\end_layout

\end_deeper
\begin_layout Itemize
Key base plotting functions:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
plot
\family default
: makes scatter plot or other type of plot depending on the class of the
 object being plotted.
\end_layout

\begin_layout Itemize

\family typewriter
lines
\family default
: add lines to a plot, given a vector x values and a ccorresponding vector
 of y values (or a two-column matrix).
\end_layout

\begin_layout Itemize

\family typewriter
points
\family default
: add points to a plot.
\end_layout

\begin_layout Itemize

\family typewriter
text
\family default
: add text labels to a plot using specified x and y coordinates.
\end_layout

\begin_layout Itemize

\family typewriter
title
\family default
: add annotations to x and y axis labels, title, subtitle, outer margin.
\end_layout

\begin_layout Itemize

\family typewriter
mtext
\family default
: add arbitrary text to the inner or outer margins of the plot.
\end_layout

\begin_layout Itemize

\family typewriter
axis
\family default
: add axis ticks or labels.
\end_layout

\end_deeper
\begin_layout Itemize
Use 
\family typewriter
type = 
\begin_inset Quotes eld
\end_inset

n
\begin_inset Quotes erd
\end_inset


\family default
 as an argument to 
\family typewriter
plot
\family default
 to initialize the plot but not actually put anything in it.
 Can use 
\family typewriter
points
\family default
 or 
\family typewriter
lines
\family default
 to add things afterwards.
\end_layout

\begin_layout Itemize
Multiple base plots:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
\end_layout

\begin_layout Plain Layout

with(airquality, {
\end_layout

\begin_layout Plain Layout

	plot(Wind, Ozone, main = "Ozone and Wind")
\end_layout

\begin_layout Plain Layout

	plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
\end_layout

\begin_layout Plain Layout

	plot(Temperature, Ozone, main = "Ozone and Temperature")
\end_layout

\begin_layout Plain Layout

	mtext("Ozone and Weather in New York City", outer = TRUE)
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The base plotting system is very flexible and offers a high degree of control
 over plotting.
\end_layout

\begin_layout Subsection*
Graphics devices in R
\end_layout

\begin_layout Itemize
A graphics device is something where you can make a plot appear.
\end_layout

\begin_deeper
\begin_layout Itemize
A window on your computer (screen device).
\end_layout

\begin_layout Itemize
A PDF file (file device).
\end_layout

\begin_layout Itemize
A PNG or JPEG file (file device).
\end_layout

\begin_layout Itemize
A scalable vector graphics (SVG) file (file device).
\end_layout

\end_deeper
\begin_layout Itemize
When you make a plot in R, it has to be 
\begin_inset Quotes eld
\end_inset

sent
\begin_inset Quotes erd
\end_inset

 to a specific graphics device.
\end_layout

\begin_layout Itemize
The most common place for a plot to be 
\begin_inset Quotes eld
\end_inset

sent
\begin_inset Quotes erd
\end_inset

 is the screen device.
\end_layout

\begin_layout Itemize
Screen device launching functions:
\end_layout

\begin_deeper
\begin_layout Itemize
Mac: 
\family typewriter
quartz()
\end_layout

\begin_layout Itemize
Windows: 
\family typewriter
windows()
\end_layout

\begin_layout Itemize
Unix/Linux: 
\family typewriter
x11()
\end_layout

\end_deeper
\begin_layout Itemize
List of devices found in 
\family typewriter
?Devices
\family default
.
\end_layout

\begin_layout Itemize
There are also user-created devices in CRAN.
\end_layout

\begin_layout Itemize
How does a plot get created?
\end_layout

\begin_deeper
\begin_layout Itemize
Most common approach: call a plotting function, the plot appears on the
 screen, then you can annotate the plot as necessary.
\end_layout

\begin_layout Itemize
Other approach:
\end_layout

\begin_deeper
\begin_layout Itemize
Explicitly launch a graphics device.
\end_layout

\begin_layout Itemize
Call plotting function to make a plot (no plot will appear if using a file
 device).
\end_layout

\begin_layout Itemize
Annotate plot if necessary.
\end_layout

\begin_layout Itemize
Explicitly close grahpics device with 
\family typewriter
dev.off()
\family default
.
 (this is very important!)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Example of using a file device:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pdf(file = "myplot.pdf")
\end_layout

\begin_layout Plain Layout

with(faithful, plot(eruptions, waiting))
\end_layout

\begin_layout Plain Layout

title(main = "Old Faithful Geyser data")
\end_layout

\begin_layout Plain Layout

dev.off()
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Two basic types of file devices:
\end_layout

\begin_deeper
\begin_layout Itemize
Vector formats:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
pdf
\family default
: useful for line-type graphics, resizes well, usually portable.
 Not efficient if a plot has many objects/points.
\end_layout

\begin_layout Itemize

\family typewriter
svg
\family default
: XML-based scalable vector graphics, supports animation and interactivity,
 potentially useful for web-based plots.
\end_layout

\begin_layout Itemize

\family typewriter
win.metafile
\family default
: Windows metafile format (only on Windows).
\end_layout

\begin_layout Itemize

\family typewriter
postscript
\family default
: older format, also resizes well, usually portable, can be used to create
 encapsulated postscript files.
\end_layout

\end_deeper
\begin_layout Itemize
Bitmap formats:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
png
\family default
: bitmapped format, good for line drawings or images with solid colors,
 uses lossless compression.
 Most web browsers can read this format natively, good for plotting many
 points, does not resize well.
\end_layout

\begin_layout Itemize

\family typewriter
jpeg
\family default
: good for photograhps or natural scenes, uses lossy compression.
 Good for plotting many, many, many points, does not resize well, can be
 red by almost any computer and any web browser.
 Not great for line drawings.
\end_layout

\begin_layout Itemize

\family typewriter
tiff
\family default
: creates bitmap files in the TIFF format, supports lossless compression.
\end_layout

\begin_layout Itemize

\family typewriter
bmp
\family default
: a native Windows bitmapped format.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
It is possible to open multiple graphics devices at once.
\end_layout

\begin_layout Itemize
Plotting can only occur on one graphics device at a time.
\end_layout

\begin_layout Itemize
The currently active graphics device can be found by calling 
\family typewriter
dev.cur().
\end_layout

\begin_deeper
\begin_layout Itemize
Every open graphics device is assigned an integer >= 2.
\end_layout

\begin_layout Itemize
You can change the active graphics device using 
\family typewriter
dev.set()
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
Copying plots from one device to another:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
dev.copy
\family default
: copy a plot from one device to another.
\end_layout

\begin_layout Itemize

\family typewriter
dev.copy2pdf
\family default
: copy a plot to a PDF file.
\end_layout

\begin_layout Itemize
Copying a plot is not an exact operation, so the reuslt may not be identical
 to the original.
\end_layout

\begin_layout Itemize
Make sure to close the file device after copying a plot from the screen
 to a file!
\end_layout

\end_deeper
\begin_layout Subsection*
The lattice plotting system
\end_layout

\begin_layout Itemize
The lattice plotting system is implemented using the following packages:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
lattice
\family default
: code for producing Trellis graphics, which are independent of the base
 graphics system.
 Includes functions like 
\family typewriter
xyplot, bwplot, levelplot
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
grid
\family default
: implements a different graphing system independent of the base system,
 the 
\family typewriter
lattice
\family default
 package builds on top of 
\family typewriter
grid
\family default
.
\end_layout

\begin_deeper
\begin_layout Itemize
We seldom call functions from the 
\family typewriter
grid
\family default
 package directly.
\end_layout

\end_deeper
\begin_layout Itemize
The lattice plotting system does not have a 
\begin_inset Quotes eld
\end_inset

two-phase
\begin_inset Quotes erd
\end_inset

 aspect with separate plotting and annotation like in base plotting.
\end_layout

\begin_layout Itemize
All plotting/annotation is done at once with a single function call.
\end_layout

\end_deeper
\begin_layout Itemize
Functions in 
\family typewriter
lattice
\family default
:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
xyplot
\family default
: main function for creating scatter plots.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
xyplot(y ~ x | f * g, data=data_frame)
\end_layout

\begin_deeper
\begin_layout Itemize
Makes a scatter plot of 
\family typewriter
y
\family default
 vs.
 
\family typewriter
x
\family default
 for the categorical levels 
\family typewriter
f
\family default
 and 
\family typewriter
g
\family default
.
 
\family typewriter
data_frame
\family default
 is the data frame containing these variables.
\end_layout

\end_deeper
\begin_layout Itemize
Example:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

airquality <- transform(airquality, Month = factor(Month))
\end_layout

\begin_layout Plain Layout

xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\family typewriter
bwplot
\family default
: box and whiskers plots.
\end_layout

\begin_layout Itemize

\family typewriter
histogram
\family default
: histograms.
\end_layout

\begin_layout Itemize

\family typewriter
stripplot
\family default
: like a box plot but with actual points.
\end_layout

\begin_layout Itemize

\family typewriter
dotplot
\family default
: plot dots on 
\begin_inset Quotes eld
\end_inset

violin strings.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
splom
\family default
: scatter plot matrix; like 
\family typewriter
pairs
\family default
 in the base plotting system.
\end_layout

\begin_layout Itemize

\family typewriter
levelplot, contourplot
\family default
: for plotting image data.
\end_layout

\end_deeper
\begin_layout Itemize
Lattice functions behave differently from base graphics functiosn in one
 critical way:
\end_layout

\begin_deeper
\begin_layout Itemize
Base graphics functions plot data directly to the graphics device.
\end_layout

\begin_layout Itemize
Lattice graphics functions return an object of class 
\series bold
trellis
\series default
.
\end_layout

\begin_layout Itemize
The print methods for lattice functions actually do the work of plotting
 the data on the graphics device.
\end_layout

\begin_layout Itemize
Lattice functions can return 
\begin_inset Quotes eld
\end_inset

plot objects
\begin_inset Quotes erd
\end_inset

 that can, in principle, be stored (but it's usually better to just save
 the code and the data).
\end_layout

\begin_layout Itemize
On the command line, trellis objects are auto-printed so that it appears
 the function is plotting the data.
\end_layout

\begin_layout Itemize
Example:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

p <- xyplot(Ozone ~ Wind, data = airquality) ## Nothing happens.
\end_layout

\begin_layout Plain Layout

print(p) ## Plot appears.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Lattice functions have a panel function which controls what happens inside
 each panel of the plot.
\end_layout

\begin_layout Itemize
The lattice package comes with default panel functions, but you can supply
 your own if you want to customize what happens in each panel.
\end_layout

\begin_layout Itemize
Panel functions receive the x-y coordinates of the data in their panel (along
 with any optional arguments).
\end_layout

\begin_layout Itemize
Panel example:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

x <- rnorm(100)
\end_layout

\begin_layout Plain Layout

f <- rep(0:1, each=50)
\end_layout

\begin_layout Plain Layout

y <- x + f - (f * x) + rnorm(100, sd=0.5)
\end_layout

\begin_layout Plain Layout

f <- factor(f, labels = c("Group 1","Group 2"))
\end_layout

\begin_layout Plain Layout

xyplot(y ~ x | f, layout = c(2,1)) ## Plot with two panels.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Custom panel function
\end_layout

\begin_layout Plain Layout

xyplot(y ~ x | f, panel = function(x, y, ...) {
\end_layout

\begin_layout Plain Layout

	panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'.
\end_layout

\begin_layout Plain Layout

	panel.abline(h = median(y), lty=2) ## Add a horizontal line at the median.
\end_layout

\begin_layout Plain Layout

})
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection*
The ggplot2 plotting system
\end_layout

\begin_layout Itemize
What is it? An implementation of the 
\begin_inset Quotes eld
\end_inset

Grammar of Graphics
\begin_inset Quotes erd
\end_inset

 by Leland Wilkinson.
 A 
\begin_inset Quotes eld
\end_inset

third
\begin_inset Quotes erd
\end_inset

 graphics system for R.
\end_layout

\begin_deeper
\begin_layout Itemize
Grammar of graphics represents an abstraction of graphics ideas/objects.
\end_layout

\begin_layout Itemize
Think 
\begin_inset Quotes eld
\end_inset

verb
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

noun
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

adjective
\begin_inset Quotes erd
\end_inset

 for graphics.
\end_layout

\begin_layout Itemize
Allows for a 
\begin_inset Quotes eld
\end_inset

theory of graphics
\begin_inset Quotes erd
\end_inset

 on which to build new graphics and graphics objects.
\end_layout

\end_deeper
\begin_layout Itemize
Good documentation at http://ggplot2.org
\end_layout

\begin_layout Itemize
The most basic function: 
\family typewriter
qplot()
\end_layout

\begin_deeper
\begin_layout Itemize
Works much like the 
\family typewriter
plot()
\family default
 function in the base graphics system.
\end_layout

\begin_layout Itemize
Looks for data in a data frame, similar to 
\family typewriter
lattice
\family default
, or in the parent environment.
\end_layout

\begin_layout Itemize
Plots are made up of aesthetics (size, shape, color) and geoms (points,
 lines).
\end_layout

\begin_layout Itemize
Factors are important for indicating subsets of the data - they should be
 
\series bold
labeled
\series default
.
\end_layout

\begin_layout Itemize

\family typewriter
qplot()
\family default
 hides what goes on underneath, which is OK for most operations.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
ggplot()
\family default
 is the core function and very flexible for doing things that 
\family typewriter
qplot()
\family default
 cannot do.
\end_layout

\begin_layout Itemize
Basic example:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

library(ggplot2)
\end_layout

\begin_layout Plain Layout

qplot(displ, hwy, data = mpg)
\end_layout

\begin_layout Plain Layout

## syntax: qplot(xdata, ydata, data = data_frame)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Can add color using the drv variable from the data frame.
\end_layout

\begin_layout Plain Layout

## Colors are specified automatically.
\end_layout

\begin_layout Plain Layout

qplot(displ, hwy, data = mpg, color = drv)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Can use shape to separate categorical variables.
\end_layout

\begin_layout Plain Layout

qplot(displ, hwy, data = mpg, shape = drv)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## Adding a geom
\end_layout

\begin_layout Plain Layout

qplot(displ, hwy, data = mpg, geom=c("point","smooth"))
\end_layout

\begin_layout Plain Layout

## can specify geom smoothingmethod with method="method"
\end_layout

\begin_layout Plain Layout

## (lm is one choice)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Histogram example:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

## Basic colored histogram.
\end_layout

\begin_layout Plain Layout

qplot(hwy, data=mpg, fill=drv)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## smoothing by density
\end_layout

\begin_layout Plain Layout

qplot(hwy, data=mpg, geom = "density")
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Facets: like panels in the 
\family typewriter
lattice
\family default
 package.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

## 3 scatter plots (horizontal spacing).
\end_layout

\begin_layout Plain Layout

## .
 means "nothing", putting drv to the left of
\end_layout

\begin_layout Plain Layout

## the ~ means horizontal spacing.
\end_layout

\begin_layout Plain Layout

qplot(displ, hwy, data=mpg, facets = .~ drv)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

## 3 histograms (vertical spacing).
\end_layout

\begin_layout Plain Layout

qplot(hwy, data=mpg, facets = drv ~ ., binwidth=2)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Difficult to customize 
\family typewriter
qplot()
\family default
, best to use full ggplot2 if you want to customize.
\end_layout

\begin_layout Itemize
Basic components of a ggplot2 plot:
\end_layout

\begin_deeper
\begin_layout Itemize
A data frame.
\end_layout

\begin_layout Itemize
aesthetic mappings: how data are mapped to color, size, etc.
\end_layout

\begin_layout Itemize
geoms: geometric objects like points, lines, shapes, etc.
\end_layout

\begin_layout Itemize
facets: for conditional plots.
\end_layout

\begin_layout Itemize
stats: statistical transformations like binning, quantiles, smoothing, etc.
\end_layout

\begin_layout Itemize
scales: what scale an aesthetic map uses (example: male = red, female =
 blue).
\end_layout

\begin_layout Itemize
A coordinate system.
\end_layout

\end_deeper
\begin_layout Itemize
Plots are built up in layers (somewhat like the base graphics system).
\end_layout

\begin_deeper
\begin_layout Itemize
Plot the data.
\end_layout

\begin_layout Itemize
Overlay a summary.
\end_layout

\begin_layout Itemize
Add metadata and annotation.
\end_layout

\end_deeper
\begin_layout Itemize
Calling 
\family typewriter
ggplot()
\family default
:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

## aes = aesthetics (specify x,y variables)
\end_layout

\begin_layout Plain Layout

g <- ggplot(data, aes(var1, var2))
\end_layout

\begin_layout Plain Layout

## Add points and print the plot.
\end_layout

\begin_layout Plain Layout

p <- g + geom_point()
\end_layout

\begin_layout Plain Layout

print(p)
\end_layout

\begin_layout Plain Layout

## Adding a smooth layer.
\end_layout

\begin_layout Plain Layout

p <- g + geom_point() + geom_smooth(method="lm")
\end_layout

\begin_layout Plain Layout

## Adding facets.
\end_layout

\begin_layout Plain Layout

p <- g + geom_point() + facet_grid(.
 ~ var1) + geom_smooth(method = "lm")
\end_layout

\begin_layout Plain Layout

## Labels come from levels of the facet variables.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Annotation:
\end_layout

\begin_deeper
\begin_layout Itemize
Labels: 
\family typewriter
xlab(), ylab(), labs(), ggtitle()
\family default
.
\end_layout

\begin_layout Itemize
Each of the 
\family typewriter
geom
\family default
 functions has options to modify.
\end_layout

\begin_layout Itemize
For things that only make sense globally, use 
\family typewriter
theme()
\family default
.
\end_layout

\begin_deeper
\begin_layout Itemize
Example: 
\family typewriter
theme(legend.position = 
\begin_inset Quotes eld
\end_inset

none
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_deeper
\begin_layout Itemize
Two standard appearance themes are included:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
theme_gray()
\family default
: default theme with gray background.
\end_layout

\begin_layout Itemize

\family typewriter
theme_bw()
\family default
: more stark and plain.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Modifying aesthetics:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
p <- g + geom_point(color = 
\begin_inset Quotes eld
\end_inset

steelblue
\begin_inset Quotes erd
\end_inset

, size = 4, alpha = 1/2)
\end_layout

\begin_layout Itemize

\family typewriter
p <- g + geom_point(aes(color = var1), size = 4, alpha = 1/2)
\end_layout

\end_deeper
\begin_layout Itemize
Modifying labels:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
p <- g + geom_point(aes(color = var1)) + labs(title = 
\begin_inset Quotes eld
\end_inset

Title
\begin_inset Quotes erd
\end_inset

) + labs(x = expression(
\begin_inset Quotes eld
\end_inset

log 
\begin_inset Quotes eld
\end_inset

 * PM[2.5]), y = 
\begin_inset Quotes eld
\end_inset

Y label
\begin_inset Quotes erd
\end_inset

))
\end_layout

\end_deeper
\begin_layout Itemize
Customizing the smooth:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
p <- g + geom_smooth(size = 4, linetype = 3, method = 
\begin_inset Quotes eld
\end_inset

lm
\begin_inset Quotes erd
\end_inset

, se = FALSE)
\end_layout

\begin_layout Itemize

\family typewriter
se = FALSE
\family default
 turns off the confidence interval.
\end_layout

\end_deeper
\begin_layout Itemize
Changing the theme:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
p <- g + geom_point(aes(color = cmicat)) + theme_bw(base_family = 
\begin_inset Quotes eld
\end_inset

Times
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_deeper
\begin_layout Itemize
Axis limits
\end_layout

\begin_deeper
\begin_layout Itemize
Don't do 
\family typewriter
p <- g + geom_line() + ylim(-3, 3)
\family default
! This subsets the data to remove any points which don't fall in the specified
 range.
\end_layout

\begin_layout Itemize
Use 
\family typewriter
p <- g + geom_line() + coord_cartesian(ylim = c(-3, 3)).
\end_layout

\end_deeper
\begin_layout Itemize
Big example: using 
\family typewriter
cut()
\family default
 function to turn a continuous variable into a categorical variables using
 ranges.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

## Calculate quantiles.
\end_layout

\begin_layout Plain Layout

cutpoints <- quantile(maacs$logno2_new, seq(0, 1, length = 4), na.rm = TRUE)
\end_layout

\begin_layout Plain Layout

## Cut the data at the deciles and create a new factor variable.
\end_layout

\begin_layout Plain Layout

maacs$no2dec <- cut(maacs$logno2_new, cutpoints)
\end_layout

\begin_layout Plain Layout

## See the levels of the newly created factor variable.
\end_layout

\begin_layout Plain Layout

levels(maacs$no2dec)
\end_layout

\begin_layout Plain Layout

## Plot goal: 2 x 4 array of plots grouped by weight category and NO2 quantiles.
\end_layout

\begin_layout Plain Layout

## Plots have regression lines, axis labels, an overall title, transparent
 points,
\end_layout

\begin_layout Plain Layout

## Non-default font is used.
\end_layout

\begin_layout Plain Layout

g <- ggplot(maacs, aes(logpm25, NocturnalSympt))
\end_layout

\begin_layout Plain Layout

g + geom_point(alpha = 1/3)
\end_layout

\begin_layout Plain Layout

  + facet_wrap(bmicat ~ no2dec, nrow = 2, ncol = 4)
\end_layout

\begin_layout Plain Layout

  + geom_smooth(method = "lm", se = FALSE, col = "steelblue")
\end_layout

\begin_layout Plain Layout

  + theme_bw(base_family = "Avenir", base_size = 10)
\end_layout

\begin_layout Plain Layout

  + labs(x = expression("log " * PM[2.5])
\end_layout

\begin_layout Plain Layout

  + labs(y = "Nocturnal Symptoms")
\end_layout

\begin_layout Plain Layout

  + labs(title = "MAACS Cohort")
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection*
Hierarchical clustering
\end_layout

\begin_layout Itemize
Clustering organizes things that are close into groups.
\end_layout

\begin_deeper
\begin_layout Itemize
How do we define close?
\end_layout

\begin_layout Itemize
How do we group things?
\end_layout

\begin_layout Itemize
How do we visualize and interpret the grouping?
\end_layout

\end_deeper
\begin_layout Itemize
Cluster analysis is very important!
\end_layout

\begin_layout Itemize
Hierarchical clustering is an agglomerative approach.
\end_layout

\begin_deeper
\begin_layout Itemize
Find the closest two things, put them together, then find the next closest
 and repeat.
\end_layout

\begin_layout Itemize
Requires a defined distance and a merging approach.
\end_layout

\begin_layout Itemize
Produces a tree showing how close things are to each other.
\end_layout

\end_deeper
\begin_layout Itemize
Most important step - how do we define close?
\end_layout

\begin_deeper
\begin_layout Itemize
Distance or similarity
\end_layout

\begin_deeper
\begin_layout Itemize
Continuous - Euclidean distance.
\end_layout

\begin_layout Itemize
Continuous - correlation similarity.
\end_layout

\begin_layout Itemize
Binary - manhattan distance.
 (also known as taxicab distance)
\end_layout

\end_deeper
\begin_layout Itemize
Pick a distance/similarity that makes sense for your problem.
\end_layout

\end_deeper
\begin_layout Itemize
Example:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

## Generate points and plot.
\end_layout

\begin_layout Plain Layout

set.seed(1234)
\end_layout

\begin_layout Plain Layout

par(mar = c(0,0,0,0))
\end_layout

\begin_layout Plain Layout

x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
\end_layout

\begin_layout Plain Layout

y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
\end_layout

\begin_layout Plain Layout

plot(x, y, col="blue", pch = 19, cex = 2)
\end_layout

\begin_layout Plain Layout

text(x+0.05, y+0.05, labels = as.character(1:12))
\end_layout

\begin_layout Plain Layout

## Make data frame and calculate distance.
\end_layout

\begin_layout Plain Layout

dataFrame <- data.frame(x = x, y = y)
\end_layout

\begin_layout Plain Layout

dist(dataFrame) ## this contains all pairwise distances.
\end_layout

\begin_layout Plain Layout

## clustering with hclust
\end_layout

\begin_layout Plain Layout

hClustering <- hclust
\end_layout

\begin_layout Plain Layout

plot(hClustering) ## show clustering dendrogram
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Hierarchical cluster steps
\end_layout

\begin_deeper
\begin_layout Itemize
Group closest two points into a new point.
\end_layout

\begin_layout Itemize
This point's position is given by some intermediate spot between the two
 points.
\end_layout

\begin_layout Itemize
Repeat this for the next two closest points, and keep repeating.
\end_layout

\begin_layout Itemize
Can get number of clusters at any point by 
\begin_inset Quotes eld
\end_inset

cutting
\begin_inset Quotes erd
\end_inset

 the dendrogram/tree.
\end_layout

\begin_layout Itemize
You define where to 
\begin_inset Quotes eld
\end_inset

cut
\begin_inset Quotes erd
\end_inset

 the tree based on what you want to know.
\end_layout

\end_deeper
\begin_layout Itemize
For 
\begin_inset Quotes eld
\end_inset

prettier
\begin_inset Quotes erd
\end_inset

 dendrograms, get the 
\family typewriter
mypclust
\family default
 function from the course website.
\end_layout

\begin_deeper
\begin_layout Itemize
Usage: 
\family typewriter
myplclust(hClustering, lab = rep(1:3, each=4), lab.col = rep(1:3, each =
 4))
\end_layout

\end_deeper
\begin_layout Itemize
Can go to the R graph gallery to see more examples of clustering dendrograms.
\end_layout

\begin_layout Itemize
Another issue with hierarchical clustering - how do you merge point together?
 How do you determine its new location?
\end_layout

\begin_deeper
\begin_layout Itemize
One option - just use average position, like center of mass.
\end_layout

\begin_layout Itemize
Another option - 
\series bold
complete linkage
\series default
.
 Use furthest apart points to determine new position.
\end_layout

\end_deeper
\begin_layout Itemize
Heatmap: uses hierarchical clustering to visualize high-dimensional data.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

dataFrame <- data.frame(x = x, y = y)
\end_layout

\begin_layout Plain Layout

set.seed(143)
\end_layout

\begin_layout Plain Layout

dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
\end_layout

\begin_layout Plain Layout

heatmap(dataMatrix)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Overall, hierarchical clustering is useful for exploration.
\end_layout

\begin_deeper
\begin_layout Itemize
Not always obvious how to choose where to cut.
\end_layout

\begin_layout Itemize
Result may be unstable based on choices of merging strategy, distance, changing
 a few points, etc.
\end_layout

\begin_layout Itemize
May also be sensitive to the scaling of different variables.
\end_layout

\end_deeper
\begin_layout Subsection*
K-means clustering
\end_layout

\begin_layout Itemize
Can we find things that are close together?
\end_layout

\begin_layout Itemize
Similar to hierarchical clustering, how we define close is the most important
 step.
\end_layout

\begin_layout Itemize
K-means clustering is a partitioning approach.
\end_layout

\begin_deeper
\begin_layout Itemize
Fix a number of clusters.
\end_layout

\begin_layout Itemize
Get 
\begin_inset Quotes eld
\end_inset

centroids
\begin_inset Quotes erd
\end_inset

 of each cluster.
\end_layout

\begin_layout Itemize
Assign things to the closest centroid.
\end_layout

\begin_layout Itemize
Recalculate centroids.
\end_layout

\begin_layout Itemize
Repeat the previous two steps several times.
\end_layout

\begin_layout Itemize
Requires a defined distance metric, a number of clusters, and an initial
 guess as to cluster centroids.
\end_layout

\begin_layout Itemize
Produces a final estimate of cluster centroids and an assignment of each
 to point to a cluster.
\end_layout

\end_deeper
\begin_layout Itemize
Example using 
\family typewriter
kmeans()
\family default
:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

## Generate points and plot.
\end_layout

\begin_layout Plain Layout

set.seed(1234)
\end_layout

\begin_layout Plain Layout

par(mar = c(0,0,0,0))
\end_layout

\begin_layout Plain Layout

x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
\end_layout

\begin_layout Plain Layout

y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
\end_layout

\begin_layout Plain Layout

plot(x, y, col="blue", pch = 19, cex = 2)
\end_layout

\begin_layout Plain Layout

text(x+0.05, y+0.05, labels = as.character(1:12))
\end_layout

\begin_layout Plain Layout

## Make data frame and do K-means clustering.
\end_layout

\begin_layout Plain Layout

dataFrame <- data.frame(x = x, y = y)
\end_layout

\begin_layout Plain Layout

kmeansObj <- kmeans(dataFrame, centers = 3)
\end_layout

\begin_layout Plain Layout

## Plot results
\end_layout

\begin_layout Plain Layout

par(mar = rep(0.2,4))
\end_layout

\begin_layout Plain Layout

plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
\end_layout

\begin_layout Plain Layout

points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Can also plot results with a heatmap.
\end_layout

\begin_layout Itemize
K-means clustering requires a number of clusters
\end_layout

\begin_deeper
\begin_layout Itemize
Can pick these by eye/intuition.
\end_layout

\begin_layout Itemize
Can pick by cross-validation/information theory.
\end_layout

\end_deeper
\begin_layout Itemize
K-means clustering is not deterministic.
\end_layout

\begin_deeper
\begin_layout Itemize
Can specify different starting points.
\end_layout

\begin_layout Itemize
Can specify a different number of clusters.
\end_layout

\begin_layout Itemize
Can specify a different number of iterations.
\end_layout

\end_deeper
\begin_layout Subsection*
Dimension reduction
\end_layout

\begin_layout Itemize
Principal components analysis and singular value decomposition.
\end_layout

\begin_layout Itemize
If we have some matrix data with an underlying pattern in it, it's easy
 for heatmap to pick that out with hierarchical clustering.
\end_layout

\begin_layout Itemize
Patterns in rows and columns:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

hh <- hclust(dist(dataMatrix))
\end_layout

\begin_layout Plain Layout

dataMatrixOrdered <- dataMatrix([hh$order, ]
\end_layout

\begin_layout Plain Layout

par(mfrow = c(1,3))
\end_layout

\begin_layout Plain Layout

image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
\end_layout

\begin_layout Plain Layout

plot(rowMeans(dataMatrixOrdered, 40:1, , xlab = "Row Mean", ylab = "Row",
 pch = 19)
\end_layout

\begin_layout Plain Layout

plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean",
 pch = 19)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Related problem: you have multivariate variables 
\begin_inset Formula $X_{1},...,X_{n}$
\end_inset

 such that 
\begin_inset Formula $X_{1}=\left(X_{11},...,X_{1m}\right)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Goal: find a new set of multivariate variables that are uncorrelated and
 explain as much variance as possible.
\end_layout

\begin_layout Itemize
If you put all of the variables together in one matrix, find the best matrix
 created with fewer variables (lower rank) tha explains the original data.
\end_layout

\begin_layout Itemize
The first goal is statistical (principal components analysis) and the second
 goal is data compression (singular value decomposition).
\end_layout

\end_deeper
\begin_layout Itemize
Singular value decomposition:
\end_layout

\begin_deeper
\begin_layout Itemize
If 
\begin_inset Formula $X$
\end_inset

 is a matrix with each variable in a column and each observation in a row,
 then the SVD is a matrix decomposition: 
\begin_inset Formula $X=UDV^{T}$
\end_inset

.
\end_layout

\begin_layout Itemize
The columns of 
\begin_inset Formula $U$
\end_inset

 are orthogonal (left singular vectors), the columns of 
\begin_inset Formula $V$
\end_inset

 are orthogonal (right singular vectors) and 
\begin_inset Formula $D$
\end_inset

 is a diagonal matrix (singular values).
\end_layout

\end_deeper
\begin_layout Itemize
Principal components analysis: the principal components are equal to the
 right singular values if you first scale the variables (subtract the mean,
 divide by the standard deviation).
\end_layout

\begin_layout Itemize
To do singular value decomposition:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

svd1 <- svd(scale(dataMatrixOrdered))
\end_layout

\begin_layout Plain Layout

par(mfrow = c(1,3))
\end_layout

\begin_layout Plain Layout

image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
\end_layout

\begin_layout Plain Layout

plot(svd1$u[,1], 40:1, , xlab="row", ylab = "1st left singular vector",
 pch = 19)
\end_layout

\begin_layout Plain Layout

plot(svd1$v[,1], xlab="row", ylab = "1st right singular vector", pch = 19)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The “variance explained” tries to summarize how much of the total variation
 is contained in a particular point.
\end_layout

\begin_deeper
\begin_layout Itemize
Access the singular values using 
\family typewriter
svd1$d
\family default
.
\end_layout

\begin_layout Itemize
This variance explained is 
\family typewriter
svd1$d^2/sum(svd1$d^2)
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
Relationship to principal components:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

svd1 <- svd(scale(dataMatrixOrdered))
\end_layout

\begin_layout Plain Layout

pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
\end_layout

\begin_layout Plain Layout

plot(pca1$rotation[, 1], svd1$v[,1], pch = 19,
\end_layout

\begin_layout Plain Layout

	 xlab = "Principal component 1", ylab = "Right singular vector 1")
\end_layout

\begin_layout Plain Layout

abline(c(0,1))
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Problem: missing values.
 SVD can't run with missing values.
\end_layout

\begin_deeper
\begin_layout Itemize
Solution: 
\family typewriter
impute
\family default
 package.
 This packages imputes a missing value in a row using its nearest neighbors.
\end_layout

\end_deeper
\begin_layout Itemize
PCA/SVD may mix real patterns.
\end_layout

\begin_layout Itemize
These techniques can be computationally intensive.
\end_layout

\begin_layout Itemize
Alternative approaches:
\end_layout

\begin_deeper
\begin_layout Itemize
Factor analysis.
\end_layout

\begin_layout Itemize
Independent components analysis.
\end_layout

\begin_layout Itemize
Latent semantic analysis.
\end_layout

\end_deeper
\begin_layout Subsection*
Plotting and color in R
\end_layout

\begin_layout Itemize
The default color schemes for most plots in R are not very good.
\end_layout

\begin_layout Itemize
Recently, there have been developments to improve the handling/specification
 of colors in plots, graphs, etc.
\end_layout

\begin_layout Itemize
There are functions in R and in external packages that are very handy.
\end_layout

\begin_layout Itemize
Default image plots in R:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
heat.colors()
\family default
: goes from red to white (low to high).
\end_layout

\begin_layout Itemize

\family typewriter
topo.colors()
\family default
: goes from blue to white (low to high).
\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
grDevices
\family default
 packages has two useful functions:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
colorRamp
\family default
: takes a palette of colors and returns a function that takes values between
 0 and 1, indicating the extremes of the color palette.
\end_layout

\begin_deeper
\begin_layout Itemize
Ex: 
\family typewriter
pal <- colorRamp(c(
\begin_inset Quotes eld
\end_inset

red
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

blue
\begin_inset Quotes erd
\end_inset

)); pal(0)
\family default
 gives an array 
\family typewriter
(255 0 0)
\family default
, which is red.
\end_layout

\begin_layout Itemize
Ex: 
\family typewriter
pal(seq(0,1,len=10))
\family default
 gives a list of 10 colors going from red to blue.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
colorRampPalette
\family default
: takes a palette of colors and return a function that takes integer arguments
 and returns a vector of colors interpolating the palette.
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pal <- colorRampPalette(c("red","yellow"))
\end_layout

\begin_layout Plain Layout

pal(2) ## gives "#FF0000" "#FFFF00" which are hex codes for red and yellow.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
The function 
\family typewriter
colors()
\family default
 lists the names of colors you can use in any plotting function.
\end_layout

\begin_layout Itemize
One package on CRAN that contains interesting/useful color palettes: 
\family typewriter
RColorBrewer
\end_layout

\begin_deeper
\begin_layout Itemize
There are three types of palettes:
\end_layout

\begin_deeper
\begin_layout Itemize
Sequential: data are ordered from low to high.
\end_layout

\begin_layout Itemize
Diverging: to show how the data diverge from the mean (negative and positive).
\end_layout

\begin_layout Itemize
Qualitative: used to represent data that are not ordered (may be factors
 or categorical data).
\end_layout

\end_deeper
\begin_layout Itemize
Palette information can be used in conjuction with 
\family typewriter
colorRamp()
\family default
 and 
\family typewriter
colorRampPalette()
\family default
.
\end_layout

\begin_layout Itemize
Usage: 
\family typewriter
library(RColorBrewer); cols <- brewer.pal(ncolors, 
\begin_inset Quotes eld
\end_inset

paletteName
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_deeper
\begin_layout Itemize
Some other plotting notes:
\end_layout

\begin_deeper
\begin_layout Itemize
The 
\family typewriter
rgb
\family default
 function can be used to produce any color via red, green, and blue proportions.
\end_layout

\begin_layout Itemize
Color transparency can be added via a fourth parameter to 
\family typewriter
rgb
\family default
 (the 
\family typewriter
alpha
\family default
 parameter).
\end_layout

\begin_deeper
\begin_layout Itemize
This can be very useful when there is a lot of overlap between points.
\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
colorspace
\family default
 package can be used for different control over colors.
\end_layout

\end_deeper
\begin_layout Itemize
Summary: careful use of colors in plots can make it easier for the reader
 to understand what you are trying to say.
\end_layout

\end_body
\end_document
